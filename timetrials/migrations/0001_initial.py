# Generated by Django 5.1.1 on 2024-09-08 12:48

import datetime
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StandardLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('value', models.IntegerField(help_text='Points awarded for achieving this standard level. The lower the better.')),
                ('is_legacy', models.BooleanField(help_text='Whether this was part of the original 2010s standard set.')),
            ],
            options={
                'verbose_name': 'standard level',
                'verbose_name_plural': 'standard levels',
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('abbr', models.CharField(help_text='E.g. LC for Luigi Circuit and rPB for GCN Peach Beach.', max_length=8, verbose_name='abbreviation')),
                ('categories', multiselectfield.db.fields.MultiSelectField(choices=[('nonsc', 'Non-Shortcut'), ('sc', 'Shortcut'), ('unres', 'Unrestricted')], default='nonsc', max_length=14)),
            ],
            options={
                'verbose_name': 'track',
                'verbose_name_plural': 'tracks',
            },
        ),
        migrations.CreateModel(
            name='TrackCup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'verbose_name': 'cup',
                'verbose_name_plural': 'cups',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('world', 'World'), ('continent', 'Continent'), ('country', 'Country'), ('subnational', 'Subnational')], max_length=16)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('code', models.CharField(help_text='ISO 2-letter code for countries, custom 3+ letters code otherwise.', max_length=8, unique=True)),
                ('parent', models.ForeignKey(blank=True, help_text='Parent region, or blank for top-most region (i.e. World).', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='timetrials.region')),
            ],
            options={
                'verbose_name': 'region',
                'verbose_name_plural': 'regions',
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('alias', models.CharField(blank=True, help_text="Can be anything, but is meant to be the player's online pseudonym.", max_length=64, null=True)),
                ('joined_date', models.DateField(blank=True, default=datetime.datetime.today, null=True)),
                ('last_activity', models.DateField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, max_length=1024, null=True)),
                ('user', models.OneToOneField(blank=True, help_text='User account associated with this player profile.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('region', models.ForeignKey(limit_choices_to={'type__in': ('country', 'subnational')}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='players', to='timetrials.region')),
            ],
            options={
                'verbose_name': 'player',
                'verbose_name_plural': 'players',
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.PositiveIntegerField(help_text='Finish time in milliseconds (e.g. 69999 for 1:09.999).')),
                ('category', models.CharField(choices=[('nonsc', 'Non-Shortcut'), ('sc', 'Shortcut'), ('unres', 'Unrestricted')])),
                ('is_lap', models.BooleanField(default=False, help_text='Off for 3lap, on for flap.')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='date set')),
                ('video_link', models.URLField(blank=True, max_length=255, null=True)),
                ('ghost_link', models.URLField(blank=True, max_length=255, null=True)),
                ('comment', models.CharField(blank=True, max_length=128, null=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='timetrials.player')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='timetrials.track')),
            ],
            options={
                'verbose_name': 'score',
                'verbose_name_plural': 'scores',
            },
        ),
        migrations.AddField(
            model_name='track',
            name='cup',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracks', to='timetrials.trackcup'),
        ),
        migrations.CreateModel(
            name='Standard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('nonsc', 'Non-Shortcut'), ('sc', 'Shortcut'), ('unres', 'Unrestricted')])),
                ('is_lap', models.BooleanField(default=False, help_text='Off for 3lap, on for flap.')),
                ('value', models.IntegerField(blank=True, help_text='The highest score which qualifies for this standard. Leave blank for a catch-all standard.', null=True, verbose_name='threshold')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='standards', to='timetrials.standardlevel')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='standards', to='timetrials.track')),
            ],
            options={
                'verbose_name': 'standard',
                'verbose_name_plural': 'standards',
                'constraints': [models.UniqueConstraint(models.F('level'), models.F('track'), models.F('category'), models.F('is_lap'), name='unique_by_level_track_category_lap')],
            },
        ),
    ]
